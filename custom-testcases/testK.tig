/*
if 4<5 then 10 else 11
*/

/*
while(1=1) do 
if 1 <= 1 then break else break
*/

/*
let var a := 1
var b := 2
var c := 3
in
a+b+c
end
*/

/*
let 
	function test(a:int, b:int, c:int, d:int):int = 10
in 
	test(1,2,3,4)
end
*/

/*
let function test1():int =
	let
		function test2(a:int, b:int, c:int, d:int):int = 10
	in
	test2(1,2,3,4)
	end
in 
	test1()
end
*/

/*
let var a := 1
	var b := 2
	var c := 3
	var d := 10
	var e := 4
	var f := 5
	var g := 6
	var h := 7
	var i := 8
	var j := 9

	function blah():int = 3

in
a+b+ blah()
end
*/

/*
let function a():int = 10
	function b():int = 20
in
a() + b()
end
*/

/*
let function fact(n:int):int = if n = 1 then 1 else n * fact(n-1)

	function printint(i: int) =
	  let function f(i:int) = if i>0 
		     then (f(i/10); print(chr(i-i/10*10+ord("0"))))
	   in if i<0 then (print("-"); f(-i))
	      else if i>0 then f(i)
	      else print("0")
	  end

in
printint(fact(10));
print("\n")
end
*/


/*
let var a := 1
	var b := 2
	var c := 3
	var d := 10
	var e := 4
	var f := 5
	var g := 6
	var h := 7
	var i := 8
	var j := 9
	var k := 9
	var l := 9
	var m := 9
	var n := 9
	var o := 9
	var p := 9
	var q := 9
	var r := 9
	var s := 9
	var t := 9
	var u := 9
	var v := 9
	var w := 9
	var x := 9
	var y := 9
	var z := 9

	function blah():int = 1

in
a+b+c+d+e+f+g+h+i+j+k+l+m+n+o+p+q+r+s
end
*/


/*
let var a := 3
	function printint(i: int) =
	  let function f(i:int) = if i>0 
		     then (f(i/10); print(chr(i-i/10*10+ord("0"))))
	   in if i<0 then (print("-"); f(-i))
	      else if i>0 then f(i)
	      else print("0")
	  end
	function f():int = 
		let function g():int = a
		in g() end
in 
	printint(f()+5)
end
*/

/*
let var ret := 1
	function printint(i: int) =
	  let function f(i:int) = if i>0 
		     then (f(i/10); print(chr(i-i/10*10+ord("0"))))
	   in if i<0 then (print("-"); f(-i))
	      else if i>0 then f(i)
	      else print("0")
	  end
in
	for a:= 1 to 10 do (ret := ret*a);
	printint(ret)
end
*/


/*
let function fact(n:int):int = if n = 1 then 1 else n * fact(n-1)
	var sum := 0
in
for a:= 1 to 10 do (sum := sum+fact(a));
sum
end
*/

/*
let var a := 5
	function printint(i: int) =
	  let function f(i:int) = if i>0 
		     then (f(i/10); print(chr(i-i/10*10+ord("0"))))
	   in if i<0 then (print("-"); f(-i))
	      else if i>0 then f(i)
	      else print("0")
	  end
	function f(b:int, c:int, d:int, e:int, f:int, g:int):int = 
		let function fact(n:int):int = if n = 1 then 1 else n * fact(n-1)
		in
			fact(a) + fact(b) + fact(g)
		end
in 
	printint(f(1,2,3,4,5,6))
end
*/


/*
let var a := 1
	var b := 2
	var c := 3
	var d := 10
	var e := 4
	var f := 5
	var g := 6
	var h := 7
	var i := 8
	var j := 9
	var k := 9
	var l := 9
	var m := 9
	var n := 9
	var o := 9
	var p := 9
	var q := 9
	var r := 9
	var s := 9
	var t := 9
	var u := 9
	var v := 9
	var w := 9
	var x := 9
	var y := 9
	var z := 9

	function blah():int = 1

in
a+b+c+d+e+f+g+h+i+j+k+l+m+n+o;
blah();
p+q+r+s+t+u+v+w
end
*/

/*
let 

	function printint(i: int) =
	  let function f(i:int) = if i>0 
		     then (f(i/10); print(chr(i-i/10*10+ord("0"))))
	   in if i<0 then (print("-"); f(-i))
	      else if i>0 then f(i)
	      else print("0")
	  end

function fib(a:int):int=
	if a = 1 | a = 2 then 1
	else fib(a-1) + fib(a-2)



	function fib2(num:int):int = 
	let var a:= 0
		var b := 1
		var fib := 0
		function innerfib():int = if num = 1 then 1
								else (for c:= 1 to num-1 do (fib := a+b; a:=a+b; b:=a-b; a:=a-b; b:=a+b);
			 					fib)
	in
		innerfib()
	end

	function compare(n:int):int =
		if n = 1 then fib(n) = fib2(n)
		else

		(fib(n) = fib2(n)) & compare(n-1)

in

printint(fib(17));
if compare(20) then print("true\n") else print("false\n")

end
*/

/*
let 
	var zero := 0
	function getZero():int = zero

	function printint(i: int) =
	  let function f(i:int) = if i>0 
		     then (f(i/10); print(chr(i-i/10*10+ord("0"))))
	   in if i<0 then (print("-"); f(-i))
	      else if i>0 then f(i)
	      else print("0")
	  end

	function h(a:int):int = 
		let 
			var one := 1
			function getOne():int = one

			function f(x:int):int = 
				let	function g(y:int):int = if x = zero then getZero() else h(y)
				in
					x + g(a - getOne())
				end
		in
			f(a)
		end
in

printint(h(12));
print("\n")

end
*/

/*
let function printint(i: int) =
  let function f(i:int) = if i>0 
	     then (f(i/10); print(chr(i-i/10*10+ord("0"))))
   in if i<0 then (print("-"); f(-i))
      else if i>0 then f(i)
      else print("0")
  end

in
printint(  "abc" = "ab"  )
end
*/


/*
let type rec = {a:int, b:string}
	var thing := rec{a=1, b="asd"}


	function printint(i: int) =
  let function f(i:int) = if i>0 
	     then (f(i/10); print(chr(i-i/10*10+ord("0"))))
   in if i<0 then (print("-"); f(-i))
      else if i>0 then f(i)
      else print("0")
  end
in

printint(thing.a);
print(thing.b)

end
*/


/*
let type ints = array of int
	function leastBorders(x:ints, y:ints, r:ints, x1:int, y1:int, x2:int, y2:int, num:int):int = 

		let var count := 0
		in
			for i:= 0 to num-1 do

			(let var xa := x[i]
				 var ya := y[i]
				 var ra := r[i]
				 var myIns := isInside(x1, y1, xa, ya, ra)
				 var theirIns := isInside(x2, y2, xa, ya, ra)

			in
				if myIns <> theirIns then count := count + 1

			end

			);
			count

		end

	function isInside(x1:int, y1:int, x2:int, y2:int, r:int):int = 
		let var xDist := x2 - x1
			var yDist := y2 - y1
		in
			(xDist*xDist + yDist*yDist) < r*r
		end


	function printint(i: int) =
	  let function f(i:int) = if i>0 
		     then (f(i/10); print(chr(i-i/10*10+ord("0"))))
	   in if i<0 then (print("-"); f(-i))
	      else if i>0 then f(i)
	      else print("0")
	  end


in

	let var xs := ints[3] of 0
		var ys := ints[3] of 0
		var rs := ints[3] of 0
	in
		xs[0] := 0;
		xs[1] := -6;
		xs[2] := 6;

		ys[0] := 0;
		ys[1] := 1;
		ys[2] := 2;

		rs[0] := 2;
		rs[1] := 2;
		rs[2] := 2;

		printint(leastBorders(xs, ys, rs, -5,1,5,1,3))
	end

end
*/

/* print(concat(substring("abcde", 2, 2), "\n")) */

/*
let function reverse(s:string):string = 

	if size(s) = 0 
	then "" 
	else
	concat( reverse(substring(s, 1, size(s) - 1)), substring(s, 0, 1))


in
print(concat(reverse("abcde"), "\n"))
end
*/

/*
let function printint(i: int) =
	  let function f(i:int) = if i>0 
		     then (f(i/10); print(chr(i-i/10*10+ord("0"))))
	   in if i<0 then (print("-"); f(-i))
	      else if i>0 then f(i)
	      else print("0")
	  end

in

for i := 65 to 80 do

	if i > 70 then break else (print(concat(chr(i), ": ")); printint(ord(chr(i))); print("\n"))

end
*/


/* if "ab\n" <> "ab\n" then print("true\n") else print("false\n") */

/*
let function f(a:int, b:int, c:int, d:int, e:int):int = a+b+c+d+e
in 
f(1,2,3,4,5)
end
*/


/*
let function f(a:int, b:int, c:int, d:int, e:int):int =

	let function g(f:int, g:int, z:int, i:int, j:int):int = 

		let function h(k:int, l:int, m:int, n:int, o:int):int = 
			k+m+o
		in
		h(1,2,3,4,5) + f + z + j + d + e
		end
	in
	g(1,2,3,4,5) + a
	end

	function printint(i: int) =
	  let function f(i:int) = if i>0 
		     then (f(i/10); print(chr(i-i/10*10+ord("0"))))
	   in if i<0 then (print("-"); f(-i))
	      else if i>0 then f(i)
	      else print("0")
	  end


in 
printint(f(1,2,3,4,5)); /* 28 */
print("\n")
end
*/

/*
let function isEven(x:int):int = if x = 0 then 1 else isOdd(x-1)
	function isOdd(x:int):int = not(isEven(x))

	function printint(i: int) =
	  let function f(i:int) = if i>0 
		     then (f(i/10); print(chr(i-i/10*10+ord("0"))))
	   in if i<0 then (print("-"); f(-i))
	      else if i>0 then f(i)
	      else print("0")
	  end

in
printint(isEven(21))
end
*/


/*
let type ints = array of int
	type recInt = {a:int}
	var a := ints[10] of 5
	var b := ints[10] of 5

	var c:recInt := recInt{a=5}
	var d:recInt := recInt{a=5}

	var i := -65
in
if d=c then print("true\n") else print  ("false\n");
a[ (-i / 5) - 2 ]
end
*/

/*
let var i:=1

	function printint(i: int) =
	  let function f(i:int) = if i>0 
		     then (f(i/10); print(chr(i-i/10*10+ord("0"))))
	   in if i<0 then (print("-"); f(-i))
	      else if i>0 then f(i)
	      else print("0")
	  end

in
while( (break; 1) ) do
	(if i > 10 then break; printint(i); print("\n"); i := i+1)
end
*/

/* for i := (break; 10) to 10 do print("b\n") */

/* for i := 1 to 10 do (break; break; break) */

/*
let 
	function printint(i: int) =
	  let function f(i:int) = if i>0 
		     then (f(i/10); print(chr(i-i/10*10+ord("0"))))
	   in if i<0 then (print("-"); f(-i))
	      else if i>0 then f(i)
	      else print("0")
	  end
in
printint( (1=2)=2 );
printint( 1=(2=2) )
end
*/

for i := 1 to 5 do
	(for j := 1 to 5 do
		( print("a\n"); break; break);
	break)
