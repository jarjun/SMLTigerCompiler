structure A = Absyn
%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE | UMINUS

%nonterm  exp of A.exp | expseq of A.exp | program of A.exp | varDec| funDec | tyDec | dec | decs
         | ty | tyfields | typeid | logExp of A.exp
         | funCall | params | lvalue | recordCreate | recordParams | arrayCreate | arrExtra

%nonassoc ASSIGN
%right DO
%right OF
%right THEN
%right ELSE

%left OR 
%left AND
%nonassoc LE GE EQ NEQ GT LT
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS


%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: exp                          (exp)
	
exp: LET decs IN expseq END                (A.IntExp(0))
   | LET decs IN END                       (A.IntExp(0))
   | STRING                                (A.IntExp(0))
   | IF exp THEN exp                       (A.IntExp(0))
   | IF exp THEN exp ELSE exp              (A.IntExp(0))
   | logExp                                (logExp)
   | LPAREN exp RPAREN                     (exp)
   | LPAREN RPAREN                         (A.IntExp(0))
   | funCall                               (A.IntExp(0))
   | LPAREN exp SEMICOLON expseq RPAREN    (A.IntExp(0))
   | lvalue                                (A.IntExp(0))
   | NIL                                   (A.NilExp)
   | recordCreate                          (A.IntExp(0))
   | arrayCreate                           (A.IntExp(0))
   | lvalue ASSIGN exp                     (A.IntExp(0))
   | WHILE exp DO exp                      (A.IntExp(0))
   | FOR ID ASSIGN exp TO exp DO exp       (A.IntExp(0))
   | BREAK                                 (A.BreakExp(BREAKleft))
   
expseq: exp                                (A.IntExp(0))
      | expseq SEMICOLON exp               (A.IntExp(0))

funCall: ID LPAREN params RPAREN           (A.IntExp(0))
       | ID LPAREN RPAREN                  (A.IntExp(0))  

params: exp                                (A.IntExp(0))
      | exp COMMA params                   (A.IntExp(0))

logExp: INT                                (A.IntExp(INT))
  | exp PLUS exp                           (A.OpExp( {left=exp1, oper=A.PlusOp, right=exp2, pos=exp1left} ))
  | exp MINUS exp                          (A.OpExp( {left=exp1, oper=A.MinusOp, right=exp2, pos=exp1left} ))
  | exp TIMES exp                          (A.OpExp( {left=exp1, oper=A.TimesOp, right=exp2, pos=exp1left} ))
  | exp DIVIDE exp                         (A.OpExp( {left=exp1, oper=A.DivideOp, right=exp2, pos=exp1left} ))
  | exp EQ exp                             (A.OpExp( {left=exp1, oper=A.EqOp, right=exp2, pos=exp1left} ))
  | exp NEQ exp                            (A.OpExp( {left=exp1, oper=A.NeqOp, right=exp2, pos=exp1left} ))
  | exp GT exp                             (A.OpExp( {left=exp1, oper=A.GtOp, right=exp2, pos=exp1left} ))
  | exp LT exp                             (A.OpExp( {left=exp1, oper=A.LtOp, right=exp2, pos=exp1left} ))
  | exp GE exp                             (A.OpExp( {left=exp1, oper=A.GeOp, right=exp2, pos=exp1left} ))
  | exp LE exp                             (A.OpExp( {left=exp1, oper=A.LeOp, right=exp2, pos=exp1left} ))
  | exp AND exp                            (A.IfExp( {test = exp1, then' = exp2, else' = SOME(A.IntExp(0)), pos=exp1left } ))
  | exp OR exp                             (A.IfExp( {test = exp1, then' = A.IntExp(1), else' = SOME(exp2), pos=exp1left } ))
  | MINUS exp %prec UMINUS                 (A.OpExp( {left= A.IntExp(0), oper=A.MinusOp, right=exp, pos=expleft} ))

recordCreate: typeid LBRACE RBRACE              (A.IntExp(0))
            | typeid LBRACE recordParams RBRACE (A.IntExp(0))

recordParams: ID EQ exp                    (A.IntExp(0))
            | ID EQ exp COMMA recordParams (A.IntExp(0))

arrayCreate: ID LBRACK exp RBRACK OF exp   (A.IntExp(0))

lvalue: ID                                 (A.IntExp(0))
      | lvalue DOT ID                      (A.IntExp(0))
      | lvalue LBRACK exp RBRACK           (A.IntExp(0))
      | ID LBRACK exp RBRACK               (A.IntExp(0))

decs: dec                                  (A.IntExp(0))
    | decs dec                             (A.IntExp(0))

dec:  varDec                               (A.IntExp(0))
   |  funDec                               (A.IntExp(0))
   |  tyDec                                (A.IntExp(0))

varDec:  VAR ID ASSIGN exp                 (A.IntExp(0))
      |  VAR ID COLON typeid ASSIGN exp    (A.IntExp(0))

tyDec: TYPE typeid EQ  ty                  (A.IntExp(0))

ty: typeid                                 (A.IntExp(0))
  | LBRACE tyfields RBRACE                 (A.IntExp(0))
  | LBRACE RBRACE                          ()
  | ARRAY OF typeid                        (A.IntExp(0))

tyfields: ID COLON typeid                  (A.IntExp(0))
        | ID COLON typeid COMMA tyfields   (A.IntExp(0))

typeid : ID                                (A.IntExp(0))

funDec: FUNCTION ID LPAREN tyfields RPAREN EQ exp               (A.IntExp(0))
      | FUNCTION ID LPAREN RPAREN EQ exp                        (A.IntExp(0))
      | FUNCTION ID LPAREN tyfields RPAREN COLON typeid EQ exp  (A.IntExp(0))
      | FUNCTION ID LPAREN RPAREN COLON typeid EQ exp           (A.IntExp(0))
   