/*
let var a:string := "m"
	type new = array of int
	type b = new
	type rec = {id1:new, id2:b, id3:string}
	type c = array of rec
in 
1+2
end

+ 


let var a2:string := "m"
	
in 
	let var a3:int := 4
	in 
		a2+a3
	end;
	a3 + a
end
*/

/* REMEMBER THIS
let type a = array of v
	type v = int
	type a = array of v
in
0
end
*/


/*
let type a = array of b
	type b = array of v
	type v = int
in
0
end
*/



/*
let
	type a = int
	type b = a
	var asdasd:=2
	type a = string

	
in


	let var asd:b := 1
		var two:a := "abc"
	in end

end
*/


/*
let type a = b
	type b = c
	type c = d
	type d = e
	type e = int
	var num:a := 5
in 0 end
*/




/*

let 
	type b = array of a
	type a = array of v
	type v = int
	

	var arr:b := b[10] of a[10] of 8
in
1
end


*/

/*
let type q = {here: f, hello:a}
	type f = {this: r}
	type r = {num:a, num2:v}
	type a = v
	type v = int
in
1
end
*/


/* keep this for arr references */
/* 
let 
	type b = array of i
	type i = array of o
	type o = array of p
	type p = array of a
	type a = array of v

	type v = r
	type r = t
	type t = int

	var arr1:b := b[10] of i[10] of o[10] of p[1] of a[1] of 9
	
	var arr2 := p[10] of a[10] of 0

	var n:a := arr2 [1]
	var m:int := n [1]


in 
arr1[0][0][0][0][0] + n [ n[0] + (n[0] - 2) * let var a := 4 in a end ]
end
*/

/*
let
	type a = reeee
	type rec = {id1:a, id2:rec2electricboogaloo, id3:string}

	type reeee = array of int
	type m = array of int

	type rec2electricboogaloo = {id1:a, id2:int, id3:string}
	var c := 6
	var d := rec2electricboogaloo{id1=a[5] of 4, id2=4, id3="str"}
	var b:rec  := rec{id2=rec2electricboogaloo{id1=a[5] of 4, id2=4, id3="str"}, id3 = "str", id1=a[10] of 0}

	type rec2 = {id1: int}
	type arr = array of rec2
	type rec3 = {id2:arr}
	var e:rec3 := rec3	{id2=arr[4] of rec2{id1=5}}

	var f:rec3 := rec3	{id2=arr[4] of rec2{id1=8}}



	var n := f = e

in
e.id2[3].id1 + 4
end
*/

/*
let type a = array of int
	type b = array of int

	var arr1 := a[10] of 0
	var arr2 := b[1] of 0

	/* shouldn't check out */
	var bool := arr1 = arr2

in end
*/

/*
let 
	type a = array of b
	type b = array of int
	var arr:a := a[10] of b[10] of 1
in
arr[0][0]
end
*/




/*
let type a = int
	type b = string
	type c = array of a
	type d = {first: a, second: b}
	var outer := 6

	/*
	type intlist = {hd: int, t1: intlist}
	var second := intlist{hd = 2, t1 = nil}
	var first := intlist{hd = 1, t1 = second}


	var root:tree  := tree{key=1, children=nil}
	var a:treelist := treelist{hd=root, t1=nil}
	var b:treelist := treelist{hd=root, t1=a}


	*/


	type q = r
	type r = {a:int}
	
	var abc := q{a=4}


	/*var lplp := mnzxcvb{a=1} /* produces 4 error messages! */ */




	type tree = {key:int, children: treelist}
	type treelist = {hd:tree, t1:treelist}

	

	function abc(nums:c, str:b, num3:a, rec:d):int =

		outer

in
0
end 
*/

/*
let type b = int
	type arr = array of int
	type rec = {a:int}
	function test(a:int, b:string, c: arr):rec = 
				 (b; rec{a=a + c[4]})

	var testRec := test(1, "q", arr[1] of 4)
in 
	test(5, "h", arr[10] of 0)
end
*/

/*
let function fac1(a:int, b:int):int = fac1(b, a+b) + fac2(a, a-b)
	function fac2(c:int, d:int):int = fac1(d, c+d) + fac2(-c, -d)
in
	fac1(0, not(0)); substring("abc", 1, 1); print(substring(concat("a", "a"), 0, 1))
end
*/
/*
let 
	var a := 10
	var b := 5
in
for a:=0 to (b+a) do for b:=0 to a do (a+b;())
end
*/
/*
let 
	type a = string
in
	let type a = int
	var v:a := 6
	in end

end
*/

/* TODO: record cannot have parameters with identical names */
/*
let
	type a = {id1:int, id1:int}
	var rec := a{id1=5, id1=10}   
in end
*/

/*
let
	var a := 5
in while let var a:=1 in end do for a:=0 to 20 do ()
end
*/

/*
let var a := 5
	type b = {}
in
	if a<10 then if (a=10) then "abc" else "string"
end
*/

/*
let type rec = {a:int}
	type r = {l: arr}
	type arr = array of rec
	var b := r{l = arr[10] of rec{a=8} }
	var c := ()


in
	c:= c := for a:=0 to 5 do (7;  (c:=())  );

	b.l[0].a := 0
end
*/

/*
let var a:=5
in
	for a:= 1 to 6 do ();
	for b:=0 to 10 do (while (break; a<10) do break; break)
end
*/
/* 
/* give error for second declaration of a and b's type */
let type a = int
	type b = a
	type a = string
	type c = a

	var a:a := 5
	var b:b := "str"
	var c:c := 4
in end
*/

/*
/* error on redeclaration of a and the a(5) for arguments */
let function a(p1:int, p2:string) = ()
	function a(p3:int):int = 5
in 
a(5)
end
*/

/*
/*error for the second rec, doesn't throw field errors because it doesn't process it*/
let type rec = {int:int}
	type rec = {int:int, int:int}
	var int:int := 1
	var r := rec{int=int}
in end
*/

let type a = b
	type b = c
	type c = a
	var a:a := 3
	var b:b := 4
in end